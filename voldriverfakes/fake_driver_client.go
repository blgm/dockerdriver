// Code generated by counterfeiter. DO NOT EDIT.
package voldriverfakes

import (
	"sync"

	"code.cloudfoundry.org/voldriver"
)

type FakeDriver struct {
	ActivateStub        func(env voldriver.Env) voldriver.ActivateResponse
	activateMutex       sync.RWMutex
	activateArgsForCall []struct {
		env voldriver.Env
	}
	activateReturns struct {
		result1 voldriver.ActivateResponse
	}
	activateReturnsOnCall map[int]struct {
		result1 voldriver.ActivateResponse
	}
	GetStub        func(env voldriver.Env, getRequest voldriver.GetRequest) voldriver.GetResponse
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		env        voldriver.Env
		getRequest voldriver.GetRequest
	}
	getReturns struct {
		result1 voldriver.GetResponse
	}
	getReturnsOnCall map[int]struct {
		result1 voldriver.GetResponse
	}
	ListStub        func(env voldriver.Env) voldriver.ListResponse
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		env voldriver.Env
	}
	listReturns struct {
		result1 voldriver.ListResponse
	}
	listReturnsOnCall map[int]struct {
		result1 voldriver.ListResponse
	}
	MountStub        func(env voldriver.Env, mountRequest voldriver.MountRequest) voldriver.MountResponse
	mountMutex       sync.RWMutex
	mountArgsForCall []struct {
		env          voldriver.Env
		mountRequest voldriver.MountRequest
	}
	mountReturns struct {
		result1 voldriver.MountResponse
	}
	mountReturnsOnCall map[int]struct {
		result1 voldriver.MountResponse
	}
	PathStub        func(env voldriver.Env, pathRequest voldriver.PathRequest) voldriver.PathResponse
	pathMutex       sync.RWMutex
	pathArgsForCall []struct {
		env         voldriver.Env
		pathRequest voldriver.PathRequest
	}
	pathReturns struct {
		result1 voldriver.PathResponse
	}
	pathReturnsOnCall map[int]struct {
		result1 voldriver.PathResponse
	}
	UnmountStub        func(env voldriver.Env, unmountRequest voldriver.UnmountRequest) voldriver.ErrorResponse
	unmountMutex       sync.RWMutex
	unmountArgsForCall []struct {
		env            voldriver.Env
		unmountRequest voldriver.UnmountRequest
	}
	unmountReturns struct {
		result1 voldriver.ErrorResponse
	}
	unmountReturnsOnCall map[int]struct {
		result1 voldriver.ErrorResponse
	}
	CapabilitiesStub        func(env voldriver.Env) voldriver.CapabilitiesResponse
	capabilitiesMutex       sync.RWMutex
	capabilitiesArgsForCall []struct {
		env voldriver.Env
	}
	capabilitiesReturns struct {
		result1 voldriver.CapabilitiesResponse
	}
	capabilitiesReturnsOnCall map[int]struct {
		result1 voldriver.CapabilitiesResponse
	}
	GetVoldriverStub        func() voldriver.Driver
	getVoldriverMutex       sync.RWMutex
	getVoldriverArgsForCall []struct{}
	getVoldriverReturns     struct {
		result1 voldriver.Driver
	}
	getVoldriverReturnsOnCall map[int]struct {
		result1 voldriver.Driver
	}
	CreateStub        func(env voldriver.Env, createRequest voldriver.CreateRequest) voldriver.ErrorResponse
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		env           voldriver.Env
		createRequest voldriver.CreateRequest
	}
	createReturns struct {
		result1 voldriver.ErrorResponse
	}
	createReturnsOnCall map[int]struct {
		result1 voldriver.ErrorResponse
	}
	RemoveStub        func(env voldriver.Env, removeRequest voldriver.RemoveRequest) voldriver.ErrorResponse
	removeMutex       sync.RWMutex
	removeArgsForCall []struct {
		env           voldriver.Env
		removeRequest voldriver.RemoveRequest
	}
	removeReturns struct {
		result1 voldriver.ErrorResponse
	}
	removeReturnsOnCall map[int]struct {
		result1 voldriver.ErrorResponse
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDriver) Activate(env voldriver.Env) voldriver.ActivateResponse {
	fake.activateMutex.Lock()
	ret, specificReturn := fake.activateReturnsOnCall[len(fake.activateArgsForCall)]
	fake.activateArgsForCall = append(fake.activateArgsForCall, struct {
		env voldriver.Env
	}{env})
	fake.recordInvocation("Activate", []interface{}{env})
	fake.activateMutex.Unlock()
	if fake.ActivateStub != nil {
		return fake.ActivateStub(env)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.activateReturns.result1
}

func (fake *FakeDriver) ActivateCallCount() int {
	fake.activateMutex.RLock()
	defer fake.activateMutex.RUnlock()
	return len(fake.activateArgsForCall)
}

func (fake *FakeDriver) ActivateArgsForCall(i int) voldriver.Env {
	fake.activateMutex.RLock()
	defer fake.activateMutex.RUnlock()
	return fake.activateArgsForCall[i].env
}

func (fake *FakeDriver) ActivateReturns(result1 voldriver.ActivateResponse) {
	fake.ActivateStub = nil
	fake.activateReturns = struct {
		result1 voldriver.ActivateResponse
	}{result1}
}

func (fake *FakeDriver) ActivateReturnsOnCall(i int, result1 voldriver.ActivateResponse) {
	fake.ActivateStub = nil
	if fake.activateReturnsOnCall == nil {
		fake.activateReturnsOnCall = make(map[int]struct {
			result1 voldriver.ActivateResponse
		})
	}
	fake.activateReturnsOnCall[i] = struct {
		result1 voldriver.ActivateResponse
	}{result1}
}

func (fake *FakeDriver) Get(env voldriver.Env, getRequest voldriver.GetRequest) voldriver.GetResponse {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		env        voldriver.Env
		getRequest voldriver.GetRequest
	}{env, getRequest})
	fake.recordInvocation("Get", []interface{}{env, getRequest})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(env, getRequest)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getReturns.result1
}

func (fake *FakeDriver) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeDriver) GetArgsForCall(i int) (voldriver.Env, voldriver.GetRequest) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].env, fake.getArgsForCall[i].getRequest
}

func (fake *FakeDriver) GetReturns(result1 voldriver.GetResponse) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 voldriver.GetResponse
	}{result1}
}

func (fake *FakeDriver) GetReturnsOnCall(i int, result1 voldriver.GetResponse) {
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 voldriver.GetResponse
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 voldriver.GetResponse
	}{result1}
}

func (fake *FakeDriver) List(env voldriver.Env) voldriver.ListResponse {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		env voldriver.Env
	}{env})
	fake.recordInvocation("List", []interface{}{env})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub(env)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.listReturns.result1
}

func (fake *FakeDriver) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeDriver) ListArgsForCall(i int) voldriver.Env {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return fake.listArgsForCall[i].env
}

func (fake *FakeDriver) ListReturns(result1 voldriver.ListResponse) {
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 voldriver.ListResponse
	}{result1}
}

func (fake *FakeDriver) ListReturnsOnCall(i int, result1 voldriver.ListResponse) {
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 voldriver.ListResponse
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 voldriver.ListResponse
	}{result1}
}

func (fake *FakeDriver) Mount(env voldriver.Env, mountRequest voldriver.MountRequest) voldriver.MountResponse {
	fake.mountMutex.Lock()
	ret, specificReturn := fake.mountReturnsOnCall[len(fake.mountArgsForCall)]
	fake.mountArgsForCall = append(fake.mountArgsForCall, struct {
		env          voldriver.Env
		mountRequest voldriver.MountRequest
	}{env, mountRequest})
	fake.recordInvocation("Mount", []interface{}{env, mountRequest})
	fake.mountMutex.Unlock()
	if fake.MountStub != nil {
		return fake.MountStub(env, mountRequest)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.mountReturns.result1
}

func (fake *FakeDriver) MountCallCount() int {
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	return len(fake.mountArgsForCall)
}

func (fake *FakeDriver) MountArgsForCall(i int) (voldriver.Env, voldriver.MountRequest) {
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	return fake.mountArgsForCall[i].env, fake.mountArgsForCall[i].mountRequest
}

func (fake *FakeDriver) MountReturns(result1 voldriver.MountResponse) {
	fake.MountStub = nil
	fake.mountReturns = struct {
		result1 voldriver.MountResponse
	}{result1}
}

func (fake *FakeDriver) MountReturnsOnCall(i int, result1 voldriver.MountResponse) {
	fake.MountStub = nil
	if fake.mountReturnsOnCall == nil {
		fake.mountReturnsOnCall = make(map[int]struct {
			result1 voldriver.MountResponse
		})
	}
	fake.mountReturnsOnCall[i] = struct {
		result1 voldriver.MountResponse
	}{result1}
}

func (fake *FakeDriver) Path(env voldriver.Env, pathRequest voldriver.PathRequest) voldriver.PathResponse {
	fake.pathMutex.Lock()
	ret, specificReturn := fake.pathReturnsOnCall[len(fake.pathArgsForCall)]
	fake.pathArgsForCall = append(fake.pathArgsForCall, struct {
		env         voldriver.Env
		pathRequest voldriver.PathRequest
	}{env, pathRequest})
	fake.recordInvocation("Path", []interface{}{env, pathRequest})
	fake.pathMutex.Unlock()
	if fake.PathStub != nil {
		return fake.PathStub(env, pathRequest)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.pathReturns.result1
}

func (fake *FakeDriver) PathCallCount() int {
	fake.pathMutex.RLock()
	defer fake.pathMutex.RUnlock()
	return len(fake.pathArgsForCall)
}

func (fake *FakeDriver) PathArgsForCall(i int) (voldriver.Env, voldriver.PathRequest) {
	fake.pathMutex.RLock()
	defer fake.pathMutex.RUnlock()
	return fake.pathArgsForCall[i].env, fake.pathArgsForCall[i].pathRequest
}

func (fake *FakeDriver) PathReturns(result1 voldriver.PathResponse) {
	fake.PathStub = nil
	fake.pathReturns = struct {
		result1 voldriver.PathResponse
	}{result1}
}

func (fake *FakeDriver) PathReturnsOnCall(i int, result1 voldriver.PathResponse) {
	fake.PathStub = nil
	if fake.pathReturnsOnCall == nil {
		fake.pathReturnsOnCall = make(map[int]struct {
			result1 voldriver.PathResponse
		})
	}
	fake.pathReturnsOnCall[i] = struct {
		result1 voldriver.PathResponse
	}{result1}
}

func (fake *FakeDriver) Unmount(env voldriver.Env, unmountRequest voldriver.UnmountRequest) voldriver.ErrorResponse {
	fake.unmountMutex.Lock()
	ret, specificReturn := fake.unmountReturnsOnCall[len(fake.unmountArgsForCall)]
	fake.unmountArgsForCall = append(fake.unmountArgsForCall, struct {
		env            voldriver.Env
		unmountRequest voldriver.UnmountRequest
	}{env, unmountRequest})
	fake.recordInvocation("Unmount", []interface{}{env, unmountRequest})
	fake.unmountMutex.Unlock()
	if fake.UnmountStub != nil {
		return fake.UnmountStub(env, unmountRequest)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.unmountReturns.result1
}

func (fake *FakeDriver) UnmountCallCount() int {
	fake.unmountMutex.RLock()
	defer fake.unmountMutex.RUnlock()
	return len(fake.unmountArgsForCall)
}

func (fake *FakeDriver) UnmountArgsForCall(i int) (voldriver.Env, voldriver.UnmountRequest) {
	fake.unmountMutex.RLock()
	defer fake.unmountMutex.RUnlock()
	return fake.unmountArgsForCall[i].env, fake.unmountArgsForCall[i].unmountRequest
}

func (fake *FakeDriver) UnmountReturns(result1 voldriver.ErrorResponse) {
	fake.UnmountStub = nil
	fake.unmountReturns = struct {
		result1 voldriver.ErrorResponse
	}{result1}
}

func (fake *FakeDriver) UnmountReturnsOnCall(i int, result1 voldriver.ErrorResponse) {
	fake.UnmountStub = nil
	if fake.unmountReturnsOnCall == nil {
		fake.unmountReturnsOnCall = make(map[int]struct {
			result1 voldriver.ErrorResponse
		})
	}
	fake.unmountReturnsOnCall[i] = struct {
		result1 voldriver.ErrorResponse
	}{result1}
}

func (fake *FakeDriver) Capabilities(env voldriver.Env) voldriver.CapabilitiesResponse {
	fake.capabilitiesMutex.Lock()
	ret, specificReturn := fake.capabilitiesReturnsOnCall[len(fake.capabilitiesArgsForCall)]
	fake.capabilitiesArgsForCall = append(fake.capabilitiesArgsForCall, struct {
		env voldriver.Env
	}{env})
	fake.recordInvocation("Capabilities", []interface{}{env})
	fake.capabilitiesMutex.Unlock()
	if fake.CapabilitiesStub != nil {
		return fake.CapabilitiesStub(env)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.capabilitiesReturns.result1
}

func (fake *FakeDriver) CapabilitiesCallCount() int {
	fake.capabilitiesMutex.RLock()
	defer fake.capabilitiesMutex.RUnlock()
	return len(fake.capabilitiesArgsForCall)
}

func (fake *FakeDriver) CapabilitiesArgsForCall(i int) voldriver.Env {
	fake.capabilitiesMutex.RLock()
	defer fake.capabilitiesMutex.RUnlock()
	return fake.capabilitiesArgsForCall[i].env
}

func (fake *FakeDriver) CapabilitiesReturns(result1 voldriver.CapabilitiesResponse) {
	fake.CapabilitiesStub = nil
	fake.capabilitiesReturns = struct {
		result1 voldriver.CapabilitiesResponse
	}{result1}
}

func (fake *FakeDriver) CapabilitiesReturnsOnCall(i int, result1 voldriver.CapabilitiesResponse) {
	fake.CapabilitiesStub = nil
	if fake.capabilitiesReturnsOnCall == nil {
		fake.capabilitiesReturnsOnCall = make(map[int]struct {
			result1 voldriver.CapabilitiesResponse
		})
	}
	fake.capabilitiesReturnsOnCall[i] = struct {
		result1 voldriver.CapabilitiesResponse
	}{result1}
}

func (fake *FakeDriver) GetVoldriver() voldriver.Driver {
	fake.getVoldriverMutex.Lock()
	ret, specificReturn := fake.getVoldriverReturnsOnCall[len(fake.getVoldriverArgsForCall)]
	fake.getVoldriverArgsForCall = append(fake.getVoldriverArgsForCall, struct{}{})
	fake.recordInvocation("GetVoldriver", []interface{}{})
	fake.getVoldriverMutex.Unlock()
	if fake.GetVoldriverStub != nil {
		return fake.GetVoldriverStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getVoldriverReturns.result1
}

func (fake *FakeDriver) GetVoldriverCallCount() int {
	fake.getVoldriverMutex.RLock()
	defer fake.getVoldriverMutex.RUnlock()
	return len(fake.getVoldriverArgsForCall)
}

func (fake *FakeDriver) GetVoldriverReturns(result1 voldriver.Driver) {
	fake.GetVoldriverStub = nil
	fake.getVoldriverReturns = struct {
		result1 voldriver.Driver
	}{result1}
}

func (fake *FakeDriver) GetVoldriverReturnsOnCall(i int, result1 voldriver.Driver) {
	fake.GetVoldriverStub = nil
	if fake.getVoldriverReturnsOnCall == nil {
		fake.getVoldriverReturnsOnCall = make(map[int]struct {
			result1 voldriver.Driver
		})
	}
	fake.getVoldriverReturnsOnCall[i] = struct {
		result1 voldriver.Driver
	}{result1}
}

func (fake *FakeDriver) Create(env voldriver.Env, createRequest voldriver.CreateRequest) voldriver.ErrorResponse {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		env           voldriver.Env
		createRequest voldriver.CreateRequest
	}{env, createRequest})
	fake.recordInvocation("Create", []interface{}{env, createRequest})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(env, createRequest)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createReturns.result1
}

func (fake *FakeDriver) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeDriver) CreateArgsForCall(i int) (voldriver.Env, voldriver.CreateRequest) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].env, fake.createArgsForCall[i].createRequest
}

func (fake *FakeDriver) CreateReturns(result1 voldriver.ErrorResponse) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 voldriver.ErrorResponse
	}{result1}
}

func (fake *FakeDriver) CreateReturnsOnCall(i int, result1 voldriver.ErrorResponse) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 voldriver.ErrorResponse
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 voldriver.ErrorResponse
	}{result1}
}

func (fake *FakeDriver) Remove(env voldriver.Env, removeRequest voldriver.RemoveRequest) voldriver.ErrorResponse {
	fake.removeMutex.Lock()
	ret, specificReturn := fake.removeReturnsOnCall[len(fake.removeArgsForCall)]
	fake.removeArgsForCall = append(fake.removeArgsForCall, struct {
		env           voldriver.Env
		removeRequest voldriver.RemoveRequest
	}{env, removeRequest})
	fake.recordInvocation("Remove", []interface{}{env, removeRequest})
	fake.removeMutex.Unlock()
	if fake.RemoveStub != nil {
		return fake.RemoveStub(env, removeRequest)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.removeReturns.result1
}

func (fake *FakeDriver) RemoveCallCount() int {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return len(fake.removeArgsForCall)
}

func (fake *FakeDriver) RemoveArgsForCall(i int) (voldriver.Env, voldriver.RemoveRequest) {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return fake.removeArgsForCall[i].env, fake.removeArgsForCall[i].removeRequest
}

func (fake *FakeDriver) RemoveReturns(result1 voldriver.ErrorResponse) {
	fake.RemoveStub = nil
	fake.removeReturns = struct {
		result1 voldriver.ErrorResponse
	}{result1}
}

func (fake *FakeDriver) RemoveReturnsOnCall(i int, result1 voldriver.ErrorResponse) {
	fake.RemoveStub = nil
	if fake.removeReturnsOnCall == nil {
		fake.removeReturnsOnCall = make(map[int]struct {
			result1 voldriver.ErrorResponse
		})
	}
	fake.removeReturnsOnCall[i] = struct {
		result1 voldriver.ErrorResponse
	}{result1}
}

func (fake *FakeDriver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.activateMutex.RLock()
	defer fake.activateMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	fake.pathMutex.RLock()
	defer fake.pathMutex.RUnlock()
	fake.unmountMutex.RLock()
	defer fake.unmountMutex.RUnlock()
	fake.capabilitiesMutex.RLock()
	defer fake.capabilitiesMutex.RUnlock()
	fake.getVoldriverMutex.RLock()
	defer fake.getVoldriverMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDriver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ voldriver.Driver = new(FakeDriver)
