// Code generated by counterfeiter. DO NOT EDIT.
package voldriverfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"code.cloudfoundry.org/voldriver"
)

type FakePlugin struct {
	GetVoldriverStub        func() voldriver.Driver
	getVoldriverMutex       sync.RWMutex
	getVoldriverArgsForCall []struct{}
	getVoldriverReturns     struct {
		result1 voldriver.Driver
	}
	getVoldriverReturnsOnCall map[int]struct {
		result1 voldriver.Driver
	}
	MatchesStub        func(lager.Logger, string, *voldriver.TLSConfig) bool
	matchesMutex       sync.RWMutex
	matchesArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
		arg3 *voldriver.TLSConfig
	}
	matchesReturns struct {
		result1 bool
	}
	matchesReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePlugin) GetVoldriver() voldriver.Driver {
	fake.getVoldriverMutex.Lock()
	ret, specificReturn := fake.getVoldriverReturnsOnCall[len(fake.getVoldriverArgsForCall)]
	fake.getVoldriverArgsForCall = append(fake.getVoldriverArgsForCall, struct{}{})
	fake.recordInvocation("GetVoldriver", []interface{}{})
	fake.getVoldriverMutex.Unlock()
	if fake.GetVoldriverStub != nil {
		return fake.GetVoldriverStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getVoldriverReturns.result1
}

func (fake *FakePlugin) GetVoldriverCallCount() int {
	fake.getVoldriverMutex.RLock()
	defer fake.getVoldriverMutex.RUnlock()
	return len(fake.getVoldriverArgsForCall)
}

func (fake *FakePlugin) GetVoldriverReturns(result1 voldriver.Driver) {
	fake.GetVoldriverStub = nil
	fake.getVoldriverReturns = struct {
		result1 voldriver.Driver
	}{result1}
}

func (fake *FakePlugin) GetVoldriverReturnsOnCall(i int, result1 voldriver.Driver) {
	fake.GetVoldriverStub = nil
	if fake.getVoldriverReturnsOnCall == nil {
		fake.getVoldriverReturnsOnCall = make(map[int]struct {
			result1 voldriver.Driver
		})
	}
	fake.getVoldriverReturnsOnCall[i] = struct {
		result1 voldriver.Driver
	}{result1}
}

func (fake *FakePlugin) Matches(arg1 lager.Logger, arg2 string, arg3 *voldriver.TLSConfig) bool {
	fake.matchesMutex.Lock()
	ret, specificReturn := fake.matchesReturnsOnCall[len(fake.matchesArgsForCall)]
	fake.matchesArgsForCall = append(fake.matchesArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
		arg3 *voldriver.TLSConfig
	}{arg1, arg2, arg3})
	fake.recordInvocation("Matches", []interface{}{arg1, arg2, arg3})
	fake.matchesMutex.Unlock()
	if fake.MatchesStub != nil {
		return fake.MatchesStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.matchesReturns.result1
}

func (fake *FakePlugin) MatchesCallCount() int {
	fake.matchesMutex.RLock()
	defer fake.matchesMutex.RUnlock()
	return len(fake.matchesArgsForCall)
}

func (fake *FakePlugin) MatchesArgsForCall(i int) (lager.Logger, string, *voldriver.TLSConfig) {
	fake.matchesMutex.RLock()
	defer fake.matchesMutex.RUnlock()
	return fake.matchesArgsForCall[i].arg1, fake.matchesArgsForCall[i].arg2, fake.matchesArgsForCall[i].arg3
}

func (fake *FakePlugin) MatchesReturns(result1 bool) {
	fake.MatchesStub = nil
	fake.matchesReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakePlugin) MatchesReturnsOnCall(i int, result1 bool) {
	fake.MatchesStub = nil
	if fake.matchesReturnsOnCall == nil {
		fake.matchesReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.matchesReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakePlugin) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getVoldriverMutex.RLock()
	defer fake.getVoldriverMutex.RUnlock()
	fake.matchesMutex.RLock()
	defer fake.matchesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePlugin) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ voldriver.Plugin = new(FakePlugin)
